Metadata-Version: 2.1
Name: qtools-sxzq
Version: 1.0.0
Summary: Some custom tools in daily research
Home-page: UNKNOWN
Author: huxiaoou
Author-email: 516984451@qq.com
License: UNKNOWN
Description: # 项目简介
        
        ---
        
        ## 安装方式
        
        ```bash
        chmod +x ./install.sh
        ./install.sh
        ```
        
        ---
        
        ## 模块介绍
        
        ---
        
        ### qdata
        
        #### 类CDataDescriptor
        
        使用该类来提供描述一张表,方便在transmatrix中管理使用.
        
        #### 函数save_df_to_db
        
        将一个pd.Dataframe保存到指定表中.
        
        ```python
        def save_df_to_db(df: pd.DataFrame, db_name: str, table_name: str):
            """
        
            :param df: 待保存的数据, 不需要含有 ["code", "datetime"] 列
            :param db_name: 保存的数据库
            :param table_name: 保存的表
            :return:
            """
        ```
        
        #### 函数save_data3d_to_db
        
        将一个`dict[str, pd.DataFrame | DataView2d]` 结构存入到指定表中.
        
        ```python
        
        def save_data3d_to_db_with_key_as_code(
                data_3d: dict[str, Union[pd.DataFrame, DataView2d]],
                table_name: str,
                using_index_as_datetime: bool = True,
                datetime_name: str = "datetime",
        ):
            """
                :param data_3d: 待保存的数据,字典结构. 对其中每一组 (key, value) 对要求:
                                key 值将被插入最终的表中, 并被重命名为 'code'.
                                value 类型必须是 pd.DataFrame 或 DataView2d.
                                且必须是以下两种数据结构:
                                    1. index为时间 + 所有列对应待插入表中的fields. 在这种情况下设置 using_index_as_datetime = True,
                                       此时参数datetime_name不产生作用
                                    2. 表中某一列表示时间, 即列 = [datetime_name] + fields. 在这种情况下设置 set using_index_as_datetime = False.
                                       并需要提供参数 datetime_name
                :param table_name: 待保存进去的数据库中的表名, 默认在个人私有库下, 若权限允许可以是 "other_db.table_name"结构
                :param using_index_as_datetime: 若为 true, 确保value的index是时间. 否则用下面的参数datetime_name来指定时间列.
                :param datetime_name: value的index不是时间的前提下, 用该变量对应的列来表示时间.
            """
        
        ```
        
        ---
        
        ### qwidgets
        
        #### 终端输出渲染
        
        使用SFG/SFR等函数使在终端中输出颜色字体
        
        ```python
        from qtools_sxzq.qwidgets import SFG
        
        print(f"This output is normal, {SFG('but this output is green')}")
        ```
        
        ---
        
        ### qcalendar
        
        提供一个CCalendar类,处理日频的交易日期
        
        ```python
        from qtools_sxzq.qcalendar import CCalendar
        
        calendar = CCalendar("calendar.csv")
        trade_dates = calendar.get_iter_list(bgn_date="20120104", stp_date="20120111")
        print(trade_dates)
        ```
        
        输出
        
        ```bash
            ['20120104', '20120105', '20120106', '20120109', '20120110']
        ```
        
        更多用法请参考该类的方法.
        
        
        ---
        
        ### qcalendar
        
        提供一个`CMgrSqlDb` `CDbStruct`等类来管理`sqldb`数据库
        
        ```python
        import pandas as pd
        import scipy.stats as sps
        import random
        
        
        def create_data(nrow: int, ncol: int, cnames: list[str], hist_dates: list[str],
                        random_state: int = None) -> pd.DataFrame:
            _data = sps.norm.rvs(size=(nrow, ncol), loc=0, scale=1, random_state=random_state)
            _df = pd.DataFrame(data=_data, columns=cnames)
            _df["trade_date"] = hist_dates[0:nrow]
            _df["instrument"] = random.choices(population=list("abcd"), k=nrow)
            _df = _df[["trade_date"] + ["instrument"] + cnames]
            return _df
        
        
        if __name__ == "__main__":
            from qtools_sxzq.qcalendar import CCalendar
            from qtools_sxzq.qsqlite import CMgrSqlDb, CSqlTable, CSqlVar
        
            calendar_path = r"/path/to/calendar"
            calendar = CCalendar(calendar_path)
            h_dates = calendar.get_iter_list(bgn_date="20120101", stp_date="20250101")
        
            db_save_dir, db_name = r"/tmp", "test.db"
            table_name = "testTable"
            nr, nc = 20, 5
            cnms = [f"C{_:02d}" for _ in range(nc)]
            df = create_data(nr * 2, nc, cnames=cnms, hist_dates=h_dates)
            df_head, df_tail = df.head(nr), df.tail(nr).reset_index(drop=True)
            table = CSqlTable(
                name=table_name,
                primary_keys=[CSqlVar("trade_date", "TEXT"), CSqlVar("instrument", "TEXT")],
                value_columns=[CSqlVar(_, "REAL") for _ in cnms]
            )
            sql_lib = CMgrSqlDb(
                db_save_dir=db_save_dir,
                db_name=db_name,
                table=table,
                mode="w",
                verbose=True,
            )
        
            # --- first writing
            append_date = df_head["trade_date"].iloc[0]
            if sql_lib.check_continuity(incoming_date=append_date, calendar=calendar) == 0:
                sql_lib.update(df_head)
                df0 = sql_lib.read()
                print(f"The original data length = {len(df0)} ")
                print(df0)
        
            # --- appending
            append_date = df_tail["trade_date"].iloc[0]
            if sql_lib.check_continuity(incoming_date=append_date, calendar=calendar) == 0:
                sql_lib.update(df_tail)
                print("Append data to lib")
                df0 = sql_lib.read()
                print(f"After appending, data length = {len(df0)} ")
                print(df0)
        
            # --- head and tail
            print("The first 5 rows from the data, with columns=['trade_date', 'C00']")
            print(sql_lib.head(value_columns=["trade_date", "C00"]))
            print("The last 10 rows from the data")
            print(sql_lib.tail(n=10))
        
            # --- query
            df1 = sql_lib.read_by_conditions(conditions=[("trade_date", "<=", "20120131")])
            print("Query: trade_date <= '20120131'")
            print(df1)
        
            df3 = sql_lib.read_by_conditions(conditions=[("instrument", "=", "d"), ("trade_date", "<", "20120205")])
            print("Query: (instrument = 'd') AND (trade_date < '20120205')")
            print(df3)
        
            # --- continuity check
            sql_lib.check_continuity(incoming_date="20120306", calendar=calendar)
            sql_lib.check_continuity(incoming_date="20120307", calendar=calendar)
            sql_lib.check_continuity(incoming_date="20120308", calendar=calendar)
        ```
        
        更多用法请参考该类的方法.
        
        ---
        
        ### qplot
        
        `matplotlib`基础上进一步封装的绘图函数, 在Pycharm/VSCode智能提示加持下, 绘图参数更加清晰.
        
        以下示例
        
        #### 生成数据
        
        ```python
        import pandas as pd
        from random import randint
        
        test_size = 60
        data = pd.DataFrame(
            {
                "T": [str(_) for _ in range(2014, 2014 + test_size)],
                "x": [randint(95, 105) for _ in range(test_size)],
                "y": [randint(95, 105) for _ in range(test_size)],
            }
        ).set_index("T")
        ```
        
        #### 绘图
        
        ```python
        from qtools_sxzq.qplot import CPlotLines
        
        my_artist = CPlotLines(
            plot_data=data,
            fig_name="test-qplot-lines",  # 保存图片文件名
            fig_save_dir=r"/tmp",  # 保存位置
            line_width=4,  # 线条宽度
            line_style=["-", "-."],  # 线条样式
            line_color=["#DC143C", "#228B22"],  # 线条颜色,可以用utility.view_colors查看更多颜色
        )
        my_artist.plot()
        my_artist.set_legend(size=16, loc="upper left")  # 设置图例
        my_artist.set_axis_x(  # 设置x轴
            xtick_count=10,  # x轴标签数量
            # xtick_spread=20, # x轴标签间距,与数量不要同时设置
            xlabel="Test-XLabels",  # x轴标签
            xtick_label_size=24,  # x轴刻度标签大小
            xtick_label_rotation=45,  # x轴刻度标签旋转角度
        )
        my_artist.set_title(title="test-qplot-lines", size=48, loc="left")
        my_artist.save_and_close()
        ```
        
        **绘图时请确认data是pd.DataFrame, 且索引index是字符串格式,否则set_axis_x()函数可能不会正常运行**
        
        ---
        
        ### utility.ls_tqdb
        
        展示数据库中所有可用表.
        
        ```bash
        python -m qtools_sxzq.utility.ls_tqdb --lib huxiaoou_private
        ```
        
        ---
        
        ### utility.rm_tqdb
        
        删除数据库中指定表
        
        ```bash
        python -m qtools_sxzq.utility.rm_tqdb --lib huxiaoou_private --table name_of_table_to_remove
        ```
        
        删除数据库中所有表
        
        ```bash
        python -m qtools_sxzq.utility.rm_tqdb --lib huxiaoou_private -r
        ```
        
        ---
        
        ### utility.view_tqdb
        
        使用view_tqdb在终端中快速查看transquant数据库.
        
        #### 查看帮助
        
        ```bash
        python -m qtools_sxzq.utility.view_tqdb -h
        ```
        
        输出
        
        ```bash
        usage: view_tqdb.py [-h] --lib LIB --table TABLE [--vars VARS] [--where WHERE] [--head HEAD] [--tail TAIL] [--maxrows MAXROWS]
        
        A python script to view trans-quant database
        
        optional arguments:
          -h, --help         show this help message and exit
          --lib LIB          path for trans-quant database, like 'huxiaoou_private' or 'meta_data'
          --table TABLE      table name in the database, like 'table_avlb' or 'future_bar_1day'
          --vars VARS        variables to fetch, separated by ',' like "open,high,low,close", if not provided then fetch all.
          --sort SORT        like 'datetime' or 'datetime,code'
          --descending       sort data in descending order
          --where WHERE      conditions to filter, sql expressions like "code = 'A9999_DCE'" AND datetime >= '2024-10-01 09:00:00'
          --head HEAD        integer, head lines to print
          --tail TAIL        integer, tail lines to print
          --maxrows MAXROWS  integer, provide larger value to see more rows when print outcomes
        ```
        
        #### 查看数据库`meta_data`中的表`future_bar_1day`
        
        ```bash
        python -m qtools_sxzq.utility.view_tqdb --lib meta_data --table future_bar_1day --vars 'code,trade_day,`open`,high,low,`close`'
        ```
        
        输出结果
        
        ```bash
        SELECT code,trade_day,`open`,high,low,`close` FROM future_bar_1day:
                     code   trade_day         open         high          low        close
        0       A2005_DCE  2020-01-02  2522.345237  2535.427940  2516.458020  2525.615913
        1       A2005_DCE  2020-01-03  2525.615913  2546.548238  2524.961778  2536.082076
        2       A2005_DCE  2020-01-06  2533.465535  2558.322672  2527.578318  2557.014401
        3       A2005_DCE  2020-01-07  2560.939212  2579.254997  2555.051996  2561.593347
        4       A2005_DCE  2020-01-08  2561.593347  2593.645971  2555.706131  2586.450484
        ...           ...         ...          ...          ...          ...          ...
        251716  Y2105_DCE  2021-04-02  5855.125676  5890.446620  5746.445849  5882.295633
        251717  Y2105_DCE  2021-04-06  5864.635161  6020.862412  5864.635161  5980.107477
        251718  Y2105_DCE  2021-04-07  6009.994429  6087.428806  5984.182970  6000.484944
        251719  Y2105_DCE  2021-04-08  6000.484944  6024.937906  5845.616191  5867.352157
        251720  Y2105_DCE  2021-04-09  5876.861641  5939.352542  5834.748208  5849.691685
        ```
        
        注意,由于`open`和`close`两个价格和数据库中保留关键字重复,需要使用"`"符号包围起来.
        
        
        ---
        
        ### utility.view_sql
        
        使用view_tqdb在终端中快速查看sqlite数据库.
        
        #### 查看帮助
        
        ```bash
        python -m qtools_sxzq.utility.view_sql -h
        ```
        
        输出
        
        ```bash
        usage: view_sql.py [-h] --lib LIB --table TABLE [--vars VARS] [--where WHERE] [--head HEAD] [--tail TAIL] [--maxrows MAXROWS]
        
        A python script to view hdf5
        
        optional arguments:
          -h, --help         show this help message and exit
          --lib LIB          path for sql file, like 'E:\tmp\alternative.db'
          --table TABLE      table name in the sql file, like 'macro' or 'forex' in alternative.db
          --vars VARS        variables to fetch, separated by ',' like "open,high,low,close", if not provided then fetch all.
          --where WHERE      conditions to filter, sql expression like "(instrument = 'a' OR instrument = 'd') AND (trade_date <= '20120131')"
          --head HEAD        integer, head lines to print
          --tail TAIL        integer, tail lines to print
          --maxrows MAXROWS  integer, provide larger value to see more rows when print outcomes
        ```
        
        用法类似`qtools_sxzq.utility.view_tqdb`
        
        ---
        
        ### utility.view_colors
        
        查看各项颜色代码
        
        ```bash
        python -m qtools_sxzq.utility.view_colors
        ```
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
